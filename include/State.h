#ifdef __linux__ 
    #include <stdio.h>
#endif
#include <vector>

/***************************************************************/
/* Definitaion of  how much LC-3b register file.               */
/***************************************************************/
#define LC3b_REGS 8

/***************************************************************/
/* LC-3b State info.                                           */
/***************************************************************/

typedef struct PipeState_MEM_stage_Struct {
  /* Signals generated by MEM stage and needed by previous stages in the
    pipeline are declared below. */
  uint_16 target_pc, 
          trap_pc,
          mem_pc_mux;
} MEM_Stage_Entry;

typedef struct PipeState_SR_stage_Struct {
  /* Signals generated by SR stage and needed by previous stages in the
    pipeline are declared below. */
  bool sr_n, 
       sr_z, 
       sr_p,
       v_sr_ld_cc,
       v_sr_ld_reg;
  uint_16 sr_reg_data,      
          sr_reg_id;
} SR_Stage_Entry;

typedef struct PipeState_Hazards_Struct {
  /* Internal stall signals */ 
  bool dep_stall,
       v_de_br_stall,
       v_agex_br_stall,
       v_mem_br_stall,
       mem_stall,
       icache_r;
} Stall_Entry;

class Simulator;
class State
{
  public:
  State(Simulator & instance) : _simulator(instance) {}
  ~State(){}

  Simulator & simulator() { return _simulator; }

  void init_state();
  void SetProgramCounter(uint_16 val) { PC = val; }
  uint_16 GetProgramCounter() const {return PC; }
  uint_16 GetNBit() const { return N; }
  uint_16 GetPBit() const { return P; }
  uint_16 GetZBit() const { return Z; }
  uint_16 GetRegisterData(uint_16 reg) const;
  void rdump(FILE * dumpsim_file);

  Stall_Entry & Stall() { return STALL; }
  SR_Stage_Entry & SrStage() {return SR; }
  MEM_Stage_Entry & MemStage() {return MEM; }  

  private:
  Simulator & _simulator;
  /**************************************************************/
  /* The LC3-b registers                                        */
  /**************************************************************/  
  std::vector<uint_16> REGS;

  /***************************************************************/
  /* architectural state                                         */
  /***************************************************************/
  uint_16 PC; /* program counter */
  bool N,		  /* n condition bit */
       Z,    	/* z condition bit */
       P;		  /* p condition bit */

  MEM_Stage_Entry MEM;
  SR_Stage_Entry SR;
  Stall_Entry STALL;
};